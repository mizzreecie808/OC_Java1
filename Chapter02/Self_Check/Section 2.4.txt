Building Java Programs: A Back to Basics Approach, 5th Edition
Chapter 2 - Self-Check Problems

Section 2.4: Managing Complexity

34. Suppose that you are trying to write a program that produces the following output:

    1 3 5 7 9 11 13 15 17 19 21
    1 3 5 7 9 11

    The following program is an attempt at a solution, but it contains four major errors. 
    Identify them all.

 1   public class BadNews {
 2       public static final int MAX_ODD = 21;
 3
 4       public static void writeOdds() {
 5           // print each odd number
 6           for (int count = 1; count <= (MAX_ODD - 2); count++) {
 7               System.out.print(count + " ");
 8               count = count + 2;
 9           }
10
11           // print the last odd number
12           System.out.print(count + 2);
13       }
14
15       public static void main(String[] args) {
16           // write all odds up to 21
17           writeOdds();
18
19           // now, write all odds up to 11
20           MAX_ODD = 11;
21           writeOdds();
22       }
23     }

1. Line 6:  For loop is incrementing by 1, but should be count += 2
2. Line 12: Trying to print count outside of the for loop scope, declare before loop
3. Line 12: Should just print count, not count + 2
4. Line 20: Illegal to assign a new constant value

35. What is the output of the following unknown method?

 1   public class Strange {
 2       public static final int MAX = 5;
 3
 4       public static void unknown() {
 5           int number = 0;
 6
 7           for (int count = MAX; count >= 1; count--) {
 8                number += (count * count);
 9           }
10
11           System.out.println("The result is: " + number);
12          }
13
14       public static void main(String[] args) {
15           unknown();
16       }
17     }

Using Table Technique

Count	count	Start	Final
	>= 1	Num	Num (num += (count * count)
5	TRUE	0	25	
4	TRUE	25	25 + 16
3	TRUE	41	41 + 9
2	TRUE	50	50 + 4
1	TRUE	54	54 + 1
final = 55

36. Suppose that you have a variable called line that will take on the values 1, 2, 3, 
    4, and so on, and a class constant named SIZE that takes one of two values. You are
    going to formulate expressions in terms of line and SIZE that will yield different
    sequences of numbers of characters. Fill in the table below, indicating an 
    expression that will generate each sequence.

line value		constant 	Number of characters	Expression
			SIZE value
a. 1, 2, 3, 4, 5, 6,	1		 4,  6,  8, 10, 12, 14,	(2 * line + 2 * SIZE)
   1, 2, 3, 4, 5, 6,	2		 6,  8, 10, 12, 14, 16,	(4 * line + 3 * SIZE)
b. 1, 2, 3, 4, 5, 6,	3		13, 17, 21, 25, 29, 33,	 
   1, 2, 3, 4, 5, 6,	5		19, 23, 27, 31, 35, 39,	 
c. 1, 2, 3, 4, 5, 6,	4		10,  9,  8,  7,  6,  5,	 
   1, 2, 3, 4, 5, 6,	9		20, 19, 18, 17, 16, 15,	

a) increases by 2 for every 1 unit
   2 * line, but required number is 4
   2 * line + 2 * SIZE

b) increases by 4 for every 1 unit
   4 * line, but required number is 13 or 19
   13 - 4 = 9, so we need to add 9
   4 * line +  9 (SIZE 3) =  9 / 3 = 3
   4 * line + 15 (SIZE 5) = 15 / 5 = 3
   3 is the constant term
   4 * line + 3 * SIZE

c) decreases by 1 for every 1 unit
   -1 * line (or -line)
   for SIZE 4, expression is 11 - line (to get 10)
   for size 9, expression is 21 - line (to get 20)
   Relate the constant to the SIZE:
   11 when SIZE = 4
   21 when SIZE = 9
   SIZE = 4:4A + B = 11
   SIZE = 9:9A + B = 21
Subtract equations from each other
(9A + B) - (4A + B) = 21 - 11
 5A = 10
  A = 2

Substitute A back into first equation to get B
4(2) + B = 11
       B = 11 - 8
       B = 3

A * line + B * SIZE + C
A = rate of change with respect to line
B = rate of change with respect to SIZE
C = final starting offset (constant term)

a) 2 * line + 2 * SIZE [A =  2, B = 2, C = 0]
b) 4 * line + 3 * SIZE [A =  4, B = 3, C = 0]
c) 2 * SIZE + 3 - line [A = -1, B = 2, C = 3]


37. Write a table that determines the expressions for the number of each type of character on each of the 
    6 lines in the following output.

!!!!!!!!!!!!!!!!!!!!!!
\\!!!!!!!!!!!!!!!!!!//
\\\\!!!!!!!!!!!!!!////
\\\\\\!!!!!!!!!!//////
\\\\\\\\!!!!!!////////
\\\\\\\\\\!!//////////

---Using Table Technique---

Line	(\)	(!)	(/)
1	0	22	0
2	2	18	2
3	4	14	4
4	6	10	6
5	8	6	8
6	10	2	10

increases by 2, but required is 0:  2 * line - 2
decreases by 4, but required is 22: -4 * line + 26


expression for \ and /: (2 * line - 2)
expression for !:       (-4 * line + 26)

38. Suppose that a program has been written that produces the output shown in the 
    previous problem. Now the author wants the program to be scalable using a class 
    constant called SIZE. The previous output used a constant height of 6, since there 
    were 6 lines. The following is the output for a constant height of 4. 
    Create a new table that shows the expressions for the character counts at this new 
    size of 4, and compare these tables to figure out the expressions for any size using 
    the SIZE constant.

!!!!!!!!!!!!!!
\\!!!!!!!!!!//
\\\\!!!!!!////
\\\\\\!!//////

---Using Table Technique---

Line	(\)	(!)	(/)
1	0	14	0
2	2	10	2
3	4	6	4
4	6	2	6

increases by 2, but required is 0:  2 * line - 2
decreases by 4, but required is 22: -4 * line + 18
generalized for constant:

use two data sets (SIZE = 6 and SIZE = 4)
A) for  \ and /, for both SIZEs
	2 * line - 2
B) for !
   general form: A * line + B * SIZE + C
   1. Find the Coefficient for line (A) - rate of change
      A = -4 for both SIZEs
   2. Find the SIZE function (B * SIZE + C)
      constant = (Value at line = 1) - (A * 1)
      When SIZE = 6
          Value at line = 1, 22
          Required constant = 22 - (-4 * 1) = 26
      When SIZE = 4
          Value at line = 1, 14
          Required constant = 14 - (-4 * 1) = 18
   3. Solve for B and C
      Subtract Equation 2 from Equation 1
	  (6B + C) - (4B + C) = 26 - 18
                           2B = 8
                            B = 4
      Substitute B = 4 into Equation 2
                     4(4) + C = 18
                            C = 2
   4. Final Expression for !
      Substitute A = -4, B = 4 and C = 2 into the general expression:
      -4 * line + 4 * SIZE + 2 -or-
      4 * SIZE -4 * line + 2 -or-
      -4 * line + (4 * SIZE + 2)